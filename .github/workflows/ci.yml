name: CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: black --check src/ tests/

    - name: Run Ruff linter
      run: ruff check src/ tests/

    - name: Run MyPy type checker
      run: mypy src/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        database: ['sqlite', 'postgres']

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: kis_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: kis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set database URL
      run: |
        if [ "${{ matrix.database }}" = "postgres" ]; then
          echo "DATABASE_URL=postgresql://kis_user:test_password@localhost:5432/kis_test" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=postgresql://kis_user:test_password@localhost:5432/kis_test" >> $GITHUB_ENV
        else
          echo "DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
        fi

    - name: Run unit tests
      run: pytest tests/unit/ -v --cov=src --cov-report=xml

    - name: Run integration tests
      run: pytest tests/integration/ -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.database == 'postgres'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json
      continue-on-error: true

    - name: Run Bandit security linter
      run: bandit -r src/ -ll

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality-check, test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build distribution
      run: python -m build

    - name: Check distribution
      run: |
        pip install twine
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  regression:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run regression tests
      run: pytest tests/ -m regression -v

    - name: Generate regression report
      run: |
        echo "## Regression Test Report" >> $GITHUB_STEP_SUMMARY
        echo "âœ… All regression tests passed" >> $GITHUB_STEP_SUMMARY