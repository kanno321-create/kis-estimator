# === KIS Estimator Build — One-Shot Prompt (for Claude Code) ===

## ROLE & MODE
너는 **“KIS 백엔드 리드 엔지니어 (Claude Code)”**다.  
- 운영 모드: **Contract-First + Evidence-Gated + Spec Kit 기반**.  
- 목표: **Estimator 전용 AI 시스템**을 구축 (ERP 제외).  
- 품질바: 계약 일치 ≥99%, 회귀 20/20 통과, Evidence 100%, p95 < 200ms, Health < 50ms.  
- 실행 방식: **한 번에 전체 산출물**을 내되, 모든 결과물은 SSOT·Spec Kit 규범에 맞아야 한다.

---

## 범위 (Scope)
- 포함: `/v1/estimate`, `/v1/validate`, `/v1/documents`, `/v1/catalog`  
- 기능: FIX-4 파이프라인(외함→차단기 배치→견적포맷→표지/린트), 증거팩 생성(PDF/XLSX/SVG/JSON), 자재 카탈로그, 최소 RAG 루프.  
- 제외: ERP 관련 기능(발주/재고/회계/인사). ERP는 별도 AI가 담당.

---

## INPUT ASSETS (Canonical References)
- `NABERAL_PROJECT-master.zip` (전체 아키텍처):contentReference[oaicite:0]{index=0}  
- `frontend-kis-complete.html` (UI 계약):contentReference[oaicite:1]{index=1}  
- `spec_kit_완전_정복_kis_ai_erp_적용_논문형_가이드_ssot_기반.md` (Spec Kit 규범):contentReference[oaicite:2]{index=2}  
- `program.txt` (Estimator+ERP 운영 개요):contentReference[oaicite:3]{index=3}  
- `바이브코딩을위한지침서.txt` (Vibe Coding 규칙):contentReference[oaicite:4]{index=4}

---

## ARCHITECTURE (Target)
- API: **FastAPI (Python)** 권장. OpenAPI 3.1 + JSON Schema 계약 고정.  
- DB: PostgreSQL (schemas: estimator, shared), 모든 컬럼 **TIMESTAMPTZ + UTC**.  
- Cache/Queue: Redis (idempotency, dedup, rate-limit).  
- Gateway: FastMCP → 내부 MCP 툴 호출.  
- Observability: OpenTelemetry TraceId, 구조화 로그(traceId, dedupKey, evidence hash).  
- Delivery: Docker + CI(GitHub Actions). 모든 게이트 통과 후만 배포.

---

## MCP LAYER (등록 필수)
1. `enclosure.solve` / `validate` → fit_score ≥ 0.90  
2. `layout.place_breakers` / `check_clearance` / `balance_phases` → 간섭=0, 상평형 ≤3%  
3. `estimate.format` / `export(pdf|xlsx)` → 수식 보존=100%  
4. `doc.cover_generate` / `doc.apply_branding` → 규범 위반=0  
5. `doc.lint` / `doc.policy_check` → lint_errors=0  
6. `rag.ingest` / `normalize` / `index` / `verify` → citation coverage=100%  
7. `contract.lint` → OpenAPI 규약 점검  
8. `db.modeler` → TIMESTAMPTZ DDL  
9. `testgen.make` / `fuzz.contract` → 유닛·통합·퍼징  
10. `regression.run` → 골드셋 20/20 PASS 필수  
11. `sec.secrets_guard` → 키/토큰 유출 0  
12. `ops.rollbacks` → 원클릭 롤백

---

## CONTRACT-FIRST TASKS
A. OpenAPI 3.1 사양: `/v1/estimate`, `/v1/validate`, `/v1/documents`, `/v1/catalog`  
   - 오류 스키마 `{code,message,hint?,traceId,meta{dedupKey}}`  
   - SSE `/v1/estimate/stream`: heartbeat + meta.seq  

B. DB Schema: `quotes`, `quote_items`, `panels`, `breakers`, `documents`, `catalog_items`, `audit_logs`, `evidence_blobs`  
   - 모든 created_at/updated_at → TIMESTAMPTZ DEFAULT now() AT TIME ZONE 'utc'

C. Role/ACL: `admin`, `estimator`, `viewer` + rate limits.

---

## IMPLEMENTATION TASKS
1. API skeleton + routers + DI + error handler(AppException).  
2. Services: `estimate_service`, `panel_parser`, `layout_service`, `enclosure_service`, `document_service`, `rag_service`.  
3. Integrations: MCP Gateway client (typed). Retries + Idempotency key 필수.  
4. Documents: PDF/XLSX renderer, Cover generator, Doc lint.  

---

## TAB/PANEL RULES
- 탭 2개: 1·2 탭 모두 분석 (고압반 없음)  
- 탭 3개 이상: 2번=고압반 무시, 1·3번만 분석  
- 한 탭 내 ‘소계/합계’ 이후 +1~2행 공백 → 새 분전반 블록 시작  
- 각 블록 = 별도 견적 ID, 상호 링크 저장

---

## TESTING & GATES
- Unit/Integration/E2E + SSE heartbeat(meta None 방지)  
- Contract-Fuzzer: schema/type/enum/permissions/rate-limit  
- Regression Harness: 골드셋 20/20 PASS 전엔 merge 금지  
- EvidencePack: 모든 MCP 호출 결과 sha256 + logs + artifacts 첨부  

---

## OUTPUT (산출물)
1. `/openapi.yaml` (서버 URL placeholder OK)  
2. `/db/schema.sql` (DDL with TIMESTAMPTZ)  
3. `/api/main.py` (FastAPI server + health/ready + error schema)  
4. `/api/services/*` (stubs)  
5. `/mcp/policy.mcp.yaml` (DAG + hard-gates)  
6. `/tests/*` (unit/integration/e2e + regression)  
7. `/ops/ci.yml` (CI gates)  
8. `/docs/Runbook.md` (환경·배포·롤백·증거 검토 가이드)  
9. `/seed/catalog_items.json` (UI 자재 데이터 최소셋)

---

## DOD (Definition of Done)
- CI gates 100% PASS  
- Regression 20/20 PASS  
- EvidencePack 100%  
- OpenAPI served at `/openapi`  
- Health/Ready 정상 응답  
- Rollback test 완료  

---

# START NOW.
